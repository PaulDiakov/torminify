{"name":"Torminify","tagline":"","body":"Module for Tornado Web Server, designed to automate minification of css and js files, easily implement asynchronous loading of scripts and additional stylesheets, and cache compiled tornado templates in memory.\r\nWith torminify you can achieve the maximum possible speed of page loading:\r\n\r\n## Features: \r\n- Track changes in css, js files and templates, automatic minification of css and js using yui compressor and google closure compiler \r\n- Caching tornado templates in memory. By default tornado render compiles templates anew on each request. \r\n- Built-in asynchronous javascript loader with customizable scripts dependency. \r\n- Asynchronous loader for css files. \r\n\r\n## Dependencies: \r\n- pyyaml \r\n- tornado \r\n\r\n## Installation: \r\nRun\r\n```\r\npip install torminify\r\n```\r\nOr\r\n```\r\npip install git+https://github.com/PaulDiakov/torminify\r\n```\r\nOr clone the repository\r\n```\r\ngit clone https://github.com/PaulDiakov/torminify\r\n```\r\n\r\nIn the directory **example/** there is an example of tornado application. At first you need to move the directory **static/** from example to the directory accessible for web server and configure the path in module configuration. \r\nIn this tutorial we assume that the root directory for the static domain is  \r\n**/home/torminify/example/static/** \r\nAnd the application root directory is \r\n**/home/torminify/example/** \r\n\r\nIt is recommended to create a separate cookie-less domain for static files. We will follow this rule. Nginx configuration might look like this: \r\n\r\n**/etc/nginx/sites/st1.fornity.com** \r\n\r\n```\r\nserver {\r\nlisten 80;\r\n    server_name st1.fornity.com;\r\n    location ^~ / {\r\n        root /home/torminify/example/static/;\r\n\t\taccess_log off;\r\n        expires max;\r\n        add_header Pragma public;\r\n        add_header Cache-Control \"public\";\r\n    }\r\n}\r\n```\r\n\r\n**/etc/nginx/sites/torminify.fornity.com**\r\n\r\n```\r\nupstream demo {\r\n    server 127.0.0.1:8889;\r\n}\r\n\r\nserver {\r\n    listen 80;\r\n    server_name torminify-demo.fornity.com;\r\n    \r\n    location / {\r\n        proxy_pass_header Server;\r\n        proxy_set_header Host $http_host;\r\n        proxy_redirect off;\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n        proxy_set_header X-Scheme $scheme;\r\n        proxy_pass http://demo;\r\n    }\r\n}\r\n```\r\n\r\nImport library\r\n\r\n```\r\nfrom torminify.minify import Minify\r\n```\r\n\r\nand create an instance of the class \r\n\r\n```\r\nself.minify = Minify(\r\n\t#Файл с основными настройками модуля\r\n    config='config/minify/minify.yaml',\r\n    #Перечень css, js и шаблонов, изменения в которых будут отслеживаться\r\n    watch='config/minify/watch.yaml',\r\n    #Корневая директория домена со статикой\r\n    web_root='/home/torminify/example/static/',\r\n    #Служебный файл в котором torminify будет хранить \r\n    #время изменения отслеживаемых файлов\r\n    cache_index='cache/minify_cache.yaml',\r\n    debug=True)\r\n```\r\n\r\nConfigure the module in file **config/minify/minify.yaml**\r\n\r\n```\r\n---\r\n# If you use a separate domain for static - \r\n# specify static_domain or comment it out \r\nstatic_domain: http://st1.fornity.com\r\n\r\n# Disable Minification to accelerate application restart \r\n# during development \r\nminify_css: True\r\nminify_js: True\r\n\r\n# Specify java path on your server \r\n# (or \"java\", if JAVA_HOME is set correctly) \r\njava_path: java\r\n\r\n# Specify path to yui compressor and google closure compiler \r\nyui_path: tools/yui.jar\r\nclosure_path: tools/compiler.jar\r\n\r\n# and additional parameters, if necessary \r\n#closure_additional_params: --compilation_level ADVANCED_OPTIMIZATIONS\r\n#yui_additional_params: --line-break 0\r\n\r\n# Directory where torminify will save minified files \r\n# (relative to the root directory of the statics domain) \r\ncss_min_dir: min/\r\njs_min_dir: min/\r\n\r\n# This file will be minified \r\n# Its content will be placed in the <head> tag \r\n# Comment out css_inlined if you do not want to use this feature \r\ncss_inlined: css/inlined.css\r\n\r\n# Asynchronous javascript and css loader. \r\n# This file will be minified and embedded into the page template. \r\njs_loader: \r\n    file: config/minify/loader.js\r\n    name: loader\r\n\r\n# Directory with templates \r\n# (relative to the root directory of your application) \r\ntemplates_dir: templates/\r\n```\r\n\r\nAdd to **config/minify/watch.yaml** files, changes in which torminify should track\r\n\r\n```\r\n---\r\n# List of stylesheets\r\ncss_files:\r\n    - css/main.css\r\n\r\n# A similar list of scripts \r\n# Each js file must have a name, file path relative to \r\n# root directory of the statics domain and optionaly \r\n# can contain parameter \"extends\" - names of current file dependencies\r\n# If specified, file will be loaded only after \r\n# load of all its dependencies. \r\n\r\njs_files:\r\n    - file: js/u.js\r\n      name: u\r\n    - file: js/application.js\r\n      name: app\r\n      extends:\r\n          - u\r\n\r\n# List of templates which should be cached in memory \r\n# when application's server starts \r\npreload_templates:\r\n    - index.html\r\n```\r\n\r\nStart the server from **example/** as usual, \r\nspecify the port that was used in nginx configuration file: \r\n\r\n```\r\npython server.py --port=8889\r\n```\r\n\r\nWhen torminify built in function is used to render template, two additional parameters are passed:\r\n\r\n```\r\nself.write(self.minify.render('index.html'))\r\n```\r\n**css_inlined** - contains minified inlined.css content\r\n**css_js_loader** - contains the code of the asynchronous loader \r\nYou can see example of usage in templates/base.html\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>{% block title %}{% end %}Torminify Demo</title>\r\n    <meta \r\n    \tname=\"viewport\" \r\n    \tcontent=\"width=device-width,initial-scale=1.0,user-scalable=no\" \r\n    />\r\n    {% if css_inlined != \"\" %}\r\n    \t<style type=\"text/css\">{% raw css_inlined %}</style>\r\n    {% end %}\r\n  </head>\r\n  <body id=\"app\" class=\"wrap wider\">\r\n  \t<script>{% raw css_js_loader %}</script>\r\n    {% block body %}{% end %}\r\n  </body>\r\n</html>\r\n```\r\n\r\nThe loader adds function **on** into global scope. \r\nIt can execute code when specific js files are loaded. \r\nHere you can use file names, specified in **watch.yaml** \r\n\r\n```\r\n<script>\r\non(\"jquery\",\"app\",function(){\r\n\tconsole.log(\"This line will be displayed after a successful load of \"+\r\n\t\t\t\t\"jquery.js and application.js\");\r\n});\r\n</script>\r\n```\r\n\r\nEarlier we set for application.js (app) dependence on jquery.js (jquery), so now you can use callback like this: \r\n\r\n```\r\n<script>\r\non(\"app\",function(){\r\n\tconsole.log(\"This line will be displayed after a successful load of \"+\r\n\t\t\t\t\"jquery.js and application.js\");\r\n});\r\n</script>\r\n```\r\n\r\nDependencies and function **on** allows you to load files asynchronously, saving the boot order where it is needed. For example, jQuery plugins will not be loaded before jQuery and the code that depends on the particular plugin will run only after its successful load.\r\n","google":"UA-51790601-4","note":"Don't delete this file! It's used internally to help with page regeneration."}