{"name":"Torminify","tagline":"","body":"# torminify\r\nМодуль Tornado Web Framework, позволяющий автомизировать минификацию css и js, легко реализовать асинхронную загрузку скриптов и дополнительных таблиц стилей, а также кэшировать в памяти скомпилированные шаблоны tornado.\r\nС помощью torminify вы сможете добиться максимально возможной скорости загрузки страниц: \r\n\r\n[Demo](http://torminify.fornity.com/)\r\n\r\n[PageSpeed Insights](https://developers.google.com/speed/pagespeed/insights/?url=http%3A%2F%2Ftorminify.fornity.com%2F&tab=mobile)\r\n\r\nAny questions? Follow me on twitter: [@pauldiakov](http://twitter.com/pauldiakov)\r\n\r\n## Возможности:\r\n- отслеживание изменений css, js файлов и шаблонов, автоматическая минификация css и js с помощью yui compressor и google closure compiler\r\n- кэширование шаблонов tornado в памяти. По умолчанию render tornado компилирует шаблон заново на каждый запрос.\r\n- встроенный асинхронный загрузчик javascript с возможностью настройки зависимостей скриптов.\r\n- асинхронный загрузчик css файлов.\r\n\r\n## Зависимости:\r\n- pyyaml\r\n- tornado\r\n\r\n## Установка:\r\nВыполните \r\n```\r\npip install git+https://github.com/PaulDiakov/torminify\r\n```\r\nИли клонируйте репозитарий\r\n```\r\ngit clone https://github.com/PaulDiakov/torminify\r\n```\r\n\r\nВ директории **example/** находится пример tornado приложения. Для запуска необходимо переместить директорию **static/** из примера в директорию, доступную веб-серверу, и настроить пути в конфигурации модуля.\r\nВ рамках этого туториала предположим, что корневая директория для статики\r\n**/home/torminify/example/static/**\r\nА приложение находится в директории\r\n**/home/torminify/example/**\r\n\r\nДля tornado рекомендуется создавать отдельный домен для статики. Мы будем следовать этому правилу, потому конфигурация для nginx может выглядеть следующим образом:\r\n\r\n**/etc/nginx/sites/st1.fornity.com**\r\n\r\n```\r\nserver {\r\nlisten 80;\r\n    server_name st1.fornity.com;\r\n    location ^~ / {\r\n        root /home/torminify/example/static/;\r\n\t\taccess_log off;\r\n        expires max;\r\n        add_header Pragma public;\r\n        add_header Cache-Control \"public\";\r\n    }\r\n}\r\n```\r\n\r\n**/etc/nginx/sites/torminify.fornity.com**\r\n\r\n```\r\nupstream demo {\r\n    server 127.0.0.1:8889;\r\n}\r\n\r\nserver {\r\n    listen 80;\r\n    server_name torminify-demo.fornity.com;\r\n    \r\n    location / {\r\n        proxy_pass_header Server;\r\n        proxy_set_header Host $http_host;\r\n        proxy_redirect off;\r\n        proxy_set_header X-Real-IP $remote_addr;\r\n        proxy_set_header X-Scheme $scheme;\r\n        proxy_pass http://demo;\r\n    }\r\n}\r\n```\r\n\r\nИмпортируйте библиотеку\r\n\r\n```\r\nfrom torminify.minify import Minify\r\n```\r\n\r\nи создайте экземпляр класса \r\n\r\n```\r\nself.minify = Minify(\r\n\t#Файл с основными настройками модуля\r\n    config='config/minify/minify.yaml',\r\n    #Перечень css, js и шаблонов, изменения в которых будут отслеживаться\r\n    watch='config/minify/watch.yaml',\r\n    #Корневая директория домена со статикой\r\n    web_root='/home/torminify/example/static/',\r\n    #Служебный файл в котором torminify будет хранить \r\n    #время изменения отслеживаемых файлов\r\n    cache_index='cache/minify_cache.yaml',\r\n    debug=True)\r\n```\r\n\r\nНастройте модуль в файле **config/minify/minify.yaml**\r\n\r\n```\r\n---\r\n#Если Вы используете отдельный домен для статики - \r\n#укажите его или закомментируйте параметр static_domain\r\nstatic_domain: http://st1.fornity.com\r\n\r\n#Отключите минификацию, чтобы ускорить перезагрузку приложения \r\n#во время разработки\r\nminify_css: True\r\nminify_js: True\r\n\r\n#Укажите путь к java на вашем сервере \r\n#(или просто java, если JAVA_HOME настроена корректно)\r\njava_path: java\r\n\r\n#Укажите пути к yui compressor и google closure compiler\r\nyui_path: tools/yui.jar\r\nclosure_path: tools/compiler.jar\r\n\r\n#и дополнительные параметры, если необходимо\r\n#closure_additional_params: --compilation_level ADVANCED_OPTIMIZATIONS\r\n#yui_additional_params: --line-break 0\r\n\r\n#Директории, куда torminify будет сохранять минифицированные файлы \r\n#(относительно корневой директории домена со статикой)\r\ncss_min_dir: static/min/\r\njs_min_dir: static/min/\r\n\r\n#Этот файл будет минифицирован \r\n#Его содержимое будет помещено в тег <head> \r\n#Закоментируйте параметр, если не хотите использовать эту возможность\r\ncss_inlined: static/css/inlined.css\r\n\r\n#Асинхронный загрузчик javascript и css. \r\n#Этот файл будет минифицирован и встроен в шаблон страницы.\r\njs_loader: \r\n    file: config/minify/loader.js\r\n    name: loader\r\n\r\n#Директория с шаблонами \r\n#(относительно корневой директории Вашего приложения)\r\ntemplates_dir: templates/\r\n```\r\n\r\nДобавьте в **config/minify/watch.yaml** файлы, изменения в которых должен отслеживать torminify\r\n\r\n```\r\n---\r\n#Список таблиц стилей\r\ncss_files:\r\n    - static/css/main.css\r\n\r\n#Аналогичный список скриптов\r\n#Каждый js файл должен иметь имя, путь к файлу относительно \r\n#корневой директории домена со статикой и опционально \r\n#может содержать параметр extends со списком имен файлов \r\n#от которого он зависит.\r\n#Если указаны зависимости - файл будет загружен только после \r\n#загрузки всех его зависимостей.\r\n\r\njs_files:\r\n    - file: static/js/u.js\r\n      name: u\r\n    - file: static/js/application.js\r\n      name: app\r\n      extends:\r\n          - u\r\n\r\n#Список шаблонов, которые должны быть закэшированы в памяти в момент \r\n#запуска сервера приложения в целях оптимизации\r\npreload_templates:\r\n    - index.html\r\n```\r\n\r\nЗапустите сервер из **example/** как обычно, указав порт, который был задан в upstream в конфиге nginx:\r\n\r\n```\r\npython server.py --port=8889\r\n```\r\n\r\nКогда для рендера шаблона используется функция из torminify, в шаблон передается два дополнительных параметра:\r\n\r\n```\r\nself.write(self.minify.render('index.html'))\r\n```\r\n**css_inlined** - содержит минифицированное содержимое inlined.css для вставки в <head>\r\n**css_js_loader** - содержит код асинхронного загрузчика\r\nПример использования этих переменных Вы можете увидеть в templates/base.html\r\n\r\n```\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <title>{% block title %}{% end %}Torminify Demo</title>\r\n    <meta \r\n    \tname=\"viewport\" \r\n    \tcontent=\"width=device-width,initial-scale=1.0,user-scalable=no\" \r\n    />\r\n    {% if css_inlined != \"\" %}\r\n    \t<style type=\"text/css\">{% raw css_inlined %}</style>\r\n    {% end %}\r\n  </head>\r\n  <body id=\"app\" class=\"wrap wider\">\r\n  \t<script>{% raw css_js_loader %}</script>\r\n    {% block body %}{% end %}\r\n  </body>\r\n</html>\r\n```\r\n\r\nЗагрузчик добавляет в глобальную область видимости функцию **on**.\r\nЕе назначение - выполнение кода в момент загрузки конкретного js файла.\r\nТут и найдут применение имена файлов, которые Вы задали в **watch.yaml**\r\n\r\nПример:\r\n\r\n```\r\n<script>\r\non(\"jquery\",\"app\",function(){\r\n\tconsole.log(\"Эта строка будет выведена после успешной загрузки \"+\r\n\t\t\t\t\"jquery.js и application.js\");\r\n});\r\n</script>\r\n```\r\n\r\nТак как ранее мы указали для application.js (app) зависимость от jquery.js (jquery) - вы можете передать функции on только зависимость от app:\r\n\r\n```\r\n<script>\r\non(\"app\",function(){\r\n\tconsole.log(\"Эта строка будет выведена после успешной загрузки \"+\r\n\t\t\t\t\"jquery.js и application.js\");\r\n});\r\n</script>\r\n```\r\n\r\nЗависимости и функция **on** позволяют загружать файлы асинхронно, сохраняя при этом последовательность загрузки, где это нужно. Плагины jquery не будут загружены до самого jquery, а код, зависящий от конкретных плагинов будет выполнить только после их полной загрузки.","google":"UA-51790601-4","note":"Don't delete this file! It's used internally to help with page regeneration."}